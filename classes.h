#ifndef CLASSES_H
#define CLASSES_H

class Material{
public:
    virtual float GetMass(float Volume) = 0;
    virtual float Heat(float Volume, float dT) = 0;

private:
    float Density;
    float MolarHeatCapacity;
};

class Gas: public Material{
public:
    float Heat(float CubeHeight, float dT) override; // Heating a cube with edge CubeHeight of gas for dT with V=const
    float HeatP(float CubeHeight, float dT); // Heating with P=const
private:
    float Cp;
};

class Fluid: public Material{
public:
    float Heat(float Volume, float dT); // Heating liquid with given volume
    float Pressure(float Height); // Pressure generated by a column of liquid with given height
};

class Solid: public Material{
public:
    float Heat(float a, float b, float c, float dT); // Heating a parallelepiped with given dimensions
    float Deformation(float Tension); // Longitudinal deformation of a rod with given Tension
private:
    float YoungsModulus;
    float PoissonsRatio;
};

class Metal: public Solid{
public:
    float Resistance(float S, float length); // Resistance of a wire with given length and profile's area
private:
    float ElectricalResistivity;
};

class NonMetal: public Solid{
public:
    float RefractionAngle(float alpha); // Snell's law with given angle of incidence
private:
    float RefractiveIndex; // n of air is 1 in this program
};

#endif